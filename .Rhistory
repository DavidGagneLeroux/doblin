xx <- seq(from=min(series_reshaped$variable), to=max(series_reshaped$variable),length.out = loess.range)
cluster.df=series_reshaped %>%  dplyr::group_by(cluster) %>%
dplyr::summarise(value=predict(adjust_span(variable, value, span = 0.2),xx,se = FALSE))  %>%
dplyr::group_by(cluster) %>% dplyr::mutate(time=xx)
## Plot log10-transformed barcode frequencies
plotList = list()
for(i in seq_along(unique(series_reshaped$cluster))){
l = plotClusterLog10(series_reshaped[series_reshaped$cluster==clusters.ranked[i],], clusters.ranked[i], sample_name, cluster.colors[i],cluster.df[cluster.df$cluster==clusters.ranked[i],], effective.breaks)
plotList[[i]]=l
}
#top10.log =cowplot::plot_grid(plotlist=plotList, align = "hv",axis="tblr", nrow=ceiling(length(unique(series_reshaped$cluster))))
#ggsave(top10.log,filename = paste(output_directory, sample_name, "_clusters_log10_", as.character(clusters.ranked[i]) ,".jpeg", sep=""),width = 18,height=7.5*length(unique(series_reshaped$cluster))/5, device="jpeg")
return(cluster.df)
}
adjust_span <- function(x, y, span) {
# x = variable
# y = value
# span = 0.2
fit <- suppressWarnings(loess(log10(y+0.0000001) ~ x, span = span))
if (inherits(fit, "try-error")) {
# If loess() returns an error, try again with a smaller span
adjust_span(x, y, span/2)
} else if (inherits(fit, "warning")) {
# If loess() issues a warning, try again with a larger span
adjust_span(x, y, span + 0.1)
} else {
# If there are no errors or warnings, return the fitted object
return(fit)
}
}
plot_clusters_and_loess(filtered_dataframes[[1]], selected_clusters, cohort_names[[1]], breaks[[1]], min_members)
#' Plot the log10-transformed barcode frequencies and the moving averages (LOESS)
#'
#' This file contains multiple functions. The main function is: plot_clusters_and_loess()
#' and it uses plotClusterLog10() and applyLOESS(). plot_clusters_and_loess() starts in
#' the same way as plotHCQuantification(), but without a cutoff column. In plot_clusters_and_loess(),
#' we plot the log10-transformed barcode frequencies contained in all selected clusters,
#' we compute a moving average per cluster and group them in a plot. We also write the files associated with
#' those two plots.
#'
#' @name plotClustersAndLoess
#' @param series.filtered a dataframe filtered by filterData()
#' @param selected.clusters  A dataframe containing the clusters from a hierarchical clustering
#'  for a specific threshold
#' @param sample_name a character string indicating the sample's name
#' @param effective.breaks a list containing the breaks for the plots
#' @param n_members an integer indicating the minimum number of members per cluster
#' @import dplyr
#' @import ggplot2
#' @export plot_clusters_and_loess
cluster.colors=c("#3cb44b","#4363d8","#e6194B","#e8ca00","#911eb4","#f58231","#22766dff","#42d4f4","#f032e6","#9A6324",
"#2F4C39", "#1D3F6E","#94170f","#665679","#F17829","#97A69C","#606EA9","#A9606E","#A99060","#F8F1AE",
"#bcf60c", "#fabebe", "#008080", "#e6beff", "#9a6324", "#fffac8")
plot_clusters_and_loess <- function(series.filtered, selected.clusters, sample_name, effective.breaks, n_members){
#series.filtered = filtered_dataframes[[1]]
#sample_name = "X1r1"
#selected.clusters=selected_clusters
#effective.breaks = breaks[[1]]
#n_members = 8
effective.labels = as.character(effective.breaks)
effective.limits = c(min(effective.breaks), max(effective.breaks))
colnames(selected.clusters)=c("cluster")
nRank = nrow(selected.clusters)
selected.clusters$rank = seq(1:nRank)
series.filtered$points = NULL
series.filtered$rank=seq(1:nRank)
grouped.clusters = merge(series.filtered,selected.clusters,by.x = "rank",by.y = "rank")
## series.reshaped is a dataframe where "variable" represents the time-point (1-18) and value
## represents the barcode frequencies
series.reshaped = reshape2::melt(grouped.clusters,id.vars = c('ID','cluster','rank','mean'))
series.reshaped$variable = as.numeric(as.character(series.reshaped$variable))
## Group by cluster and keep only the clusters with at least n_members members
series.reshaped.1=series.reshaped %>%  dplyr::group_by(cluster) %>% dplyr::filter(length(unique(ID)) >= n_members)
## To avoid ignoring the dominant barcodes, which might be in smaller clusters, we add a second criteria:
if(nrow(series.reshaped.1) != nrow(series.reshaped)){
#cat("You might be ignoring dominant barcodes, please enter a minimum mean frequency that must be reached by at least one of the members for the cluster to be considered: ")
minimum_freq <-1e-03
#minimum_freq <- as.numeric(readLines("stdin", n=1))
series.reshaped.2 = series.reshaped %>%  dplyr::group_by(cluster) %>% dplyr::filter(length(unique(ID)) < n_members) %>% mutate(mean_freq = mean(value)) %>% dplyr::filter(mean_freq >= minimum_freq)
series.reshaped.2$mean_freq = NULL
series.reshaped = rbind(series.reshaped.1, series.reshaped.2)
}
clusters_dataframe = apply_LOESS(series.reshaped, effective.breaks, sample_name)
## Write series.reshape
readr::write_csv(series.reshaped,file = paste(output_directory, sample_name, "_clustered_series_log10.csv",sep=""),col_names = TRUE)
rm(series.reshaped)
## loesss
#TODO: consid√©rer plusieurs cluster.df
clusters_dataframe$cluster=paste("C",clusters_dataframe$cluster,sep="")
clusters_dataframe$time=clusters_dataframe$time*10
clusters.loess <- tidyr::spread(clusters_dataframe, cluster, value)
# plot loess
loess.plot = ggplot(clusters_dataframe) + geom_line(aes(time/10,value,group=cluster,color=cluster),size=1) + scale_x_continuous(limits = effective.limits) +
theme_Publication() + scale_color_manual(values = cluster.colors,name="cluster") + ylab("fit") + xlab("Time") + ylim(min(clusters_dataframe$value),1)
ggsave(loess.plot,filename = paste(output_directory, sample_name, "_loess_clusters_log10.jpeg", sep=""),width = 8.25,height = 6,device = "jpeg")
# write loess file
readr::write_csv(clusters.loess,file = paste(output_directory, sample_name, "_clustered_loess_log10.csv",sep=""),col_names = TRUE)
}
#################
#' @export
#' @rdname plotClustersAndLoess
# plot clusters
plotClusterLog10 <- function(df,cluster,sample,color,tf, effective.breaks){
effective.labels = as.character(effective.breaks)
effective.limits = c(min(effective.breaks), max(effective.breaks))
p = ggplot(df,aes(x=variable,y=log10(value+0.0000001))) +
geom_line(aes(group=ID),color=color,alpha=0.4) + theme_Publication(base_size = 18) +
ylim(min(log10(df$value + 0.0000001)),0) +
labs(x = "Time",y="log10(Barcode frequency)") + guides(color = FALSE) +
scale_x_continuous(limits = effective.limits) +
coord_cartesian(expand = FALSE) + geom_line(data=tf,aes(time,value),color="black") +
annotate("text", y=-0.75, x = 3,label=paste("n",length(unique(df$ID)),sep=" = "),hjust=0,size=5) +
ggtitle(paste("Cluster",cluster,sep=" "))
# must plot to extract fit
ggsave(filename = paste(output_directory, sample, "_cluster", cluster, "_log10.jpeg", sep=""),width = 5.5,height = 4,device = "jpeg")
return(p)
}
#################
#' @export
#' @rdname plotClustersAndLoess
apply_LOESS <- function(series_reshaped, effective.breaks, sample_name){
#series_reshaped <- series.reshaped.2
## Keep only the persistent barcodes
## series_order only contains the data regarding the last generation/time-point
series_order=subset(series_reshaped,series_reshaped$variable==max(unique(series_reshaped$variable)))
series_order=series_order %>%
dplyr::group_by(cluster) %>%
dplyr::summarise(average = mean(value))
series_order=series_order[order(series_order$average,decreasing = TRUE), ]
series_order$cluster_ranked=as.numeric(rownames(series_order))
series_reshaped=merge(series_reshaped,series_order,by="cluster")
series_reshaped$cluster=NULL
names(series_reshaped)[7]="cluster"
clusters.ranked=series_order$cluster_ranked
max.range = max(series_reshaped$variable)-min(series_reshaped$variable)
loess.range = (max.range*10)+1
## Get moving average of barcode frequencies for each cluster USING LOESS
xx <- seq(from=min(series_reshaped$variable), to=max(series_reshaped$variable),length.out = loess.range)
cluster.df=series_reshaped %>%  dplyr::group_by(cluster) %>%
dplyr::summarise(value=predict(adjust_span(variable, value, span = 0.2),xx,se = FALSE))  %>%
dplyr::group_by(cluster) %>% dplyr::mutate(time=xx)
## Plot log10-transformed barcode frequencies
plotList = list()
for(i in seq_along(unique(series_reshaped$cluster))){
l = plotClusterLog10(series_reshaped[series_reshaped$cluster==clusters.ranked[i],], clusters.ranked[i], sample_name, cluster.colors[i],cluster.df[cluster.df$cluster==clusters.ranked[i],], effective.breaks)
plotList[[i]]=l
}
#top10.log =cowplot::plot_grid(plotlist=plotList, align = "hv",axis="tblr", nrow=ceiling(length(unique(series_reshaped$cluster))))
#ggsave(top10.log,filename = paste(output_directory, sample_name, "_clusters_log10_", as.character(clusters.ranked[i]) ,".jpeg", sep=""),width = 18,height=7.5*length(unique(series_reshaped$cluster))/5, device="jpeg")
return(cluster.df)
}
adjust_span <- function(x, y, span) {
# x = variable
# y = value
# span = 0.2
fit <- suppressWarnings(loess(log10(y+0.0000001) ~ x, span = span))
if (inherits(fit, "try-error")) {
# If loess() returns an error, try again with a smaller span
adjust_span(x, y, span/2)
} else if (inherits(fit, "warning")) {
# If loess() issues a warning, try again with a larger span
adjust_span(x, y, span + 0.1)
} else {
# If there are no errors or warnings, return the fitted object
return(fit)
}
}
plot_clusters_and_loess(filtered_dataframes[[1]], selected_clusters, cohort_names[[1]], breaks[[1]], min_members)
# ALL_generation.txt --> sample_test.csv (ID, Time, Reads)
# from wide- to long-format
all_gen <- read.table("~/Documents/SodaPop_tools/SodaPop/out/single_gene_two_cells/ALL_generations.txt", sep="")
colnames(all_gen) <- c("ID", 1,25,50,75,100,125,150,175,200,225,250,275,300,325,350,375,400)
new_gen <- reshape2::melt(all_gen, id.vars = c("ID"),
variable.name = "Time",
value.name = "Reads")
write.csv(new_gen, "~/Documents/SodaPop_tools/SodaPop/out/single_gene_two_cells/single_gene_two_cells.csv", row.names = FALSE)
min_freq_treshold = 0.0005
output_directory = "~/Documents/SodaPop_tools/SodaPop/out/single_gene_two_cells/"
cohort_names = list("single_gene_two_cells")
input_files = list("~/Documents/SodaPop_tools/SodaPop/out/single_gene_two_cells/single_gene_two_cells.csv")
time_treshold = 1
input_data <- lapply(input_files, readr::read_csv)
#' A reshape function
#'
#' This function allows you to reshape data for plotting. The given input is a
#' long-data format with ID, Time and Reads columns. We reshape it to have a resulting
#' dataframe containing  each of ID's max, start, final and mean frequencies.
#'
#' @param sample a dataframe produced by readr::read_csv
#' @return A reshaped dataframe for efficient plotting.
#' @export reshapeDF
reshapeDF <- function(sample) {
## Error message if raw_df doesn't have the appropriate format
testing_colnames <- identical(colnames(sample), c("ID", "Time", "Reads"))
if (testing_colnames == FALSE){
stop("# The input data format has not been respected. Make sure your input file contains 3 columns named: ID, Time and Reads.")
}
## Error message if the values of 'Reads' are not numeric
if (is.numeric(sample$Reads) == FALSE){
stop("# The values in 'Reads' column must be numeric.")
}
## Error message if the values of 'Reads' are not numeric
if (is.numeric(sample$Time) == FALSE){
stop("# The values in 'Time' column must be numeric.")
}
sample$Reads = as.numeric(as.character(sample$Reads))
# "table" uses "sample"'s IDs as IDs, Time values as column variables and Reads values as table values
table = reshape2::dcast(sample, ID ~ Time, value.var = 'Reads')
# converts a 'data.table' into a 'matrix'
m = as.matrix(table[,-1])
# converts a 'matrix' into a 'dataframe'
mat = as.data.frame(sweep(m,2,colSums(m,na.rm = TRUE),`/`))
mat$ID = table$ID
mat[,"mean"] = apply(mat[,-ncol(mat), drop=F],1, mean,na.rm=TRUE)
mat[,"max"] = apply(mat[,-c(ncol(mat),ncol(mat)-1), drop=F],1, max,na.rm=TRUE)
mat$start = mat[,1]
mat$final = mat[,ncol(mat)-4]
# reshaping mat dataframe into long-format data
df = reshape2::melt(mat,id.vars = c('ID','max','start','final','mean'))
df$variable = as.numeric(levels(df$variable))[df$variable]
df$ID = as.factor(df$ID)
if (any(is.na(df$value))){
df[is.na(df$value),]$value = 0
}
tf = df[order(df$max),]
return(tf)
}
dataframes <- lapply(input_data, reshapeDF)
n_intersect = 100
top_final <- list()
top_max <- list()
#' A fetch function
#'
#' This function allows you to fetch the top N barcodes per sample.
#' The top N barcodes are recovered according to their maximum and final frequencies.
#'
#' @param reshaped_df a dataframe produced by reshapeDF()
#' @param n_intersect integer representing the number of barcodes to fetch
#' @return A list containing 2 dataframes: top N barcodes according to their final
#'  frequencies and top N barcodes according to their maximum frequencies.
#' @export fetchTop
fetchTop <- function(reshaped_df, n_intersect) {
df.top = unique(reshaped_df[,1:4])
df.top.final = df.top[order(-df.top$final),]
df.top.max = df.top[order(-df.top$max),]
df.top.final = df.top.final[1:n_intersect,]
df.top.max = df.top.max[1:n_intersect,]
return(list(df.top.final,df.top.max))
}
x <- lapply(dataframes, fetchTop, n_intersect)
for(element in x){
top_final <-append(top_final, element[1])
top_max <- append(top_max, element[2])
}
View(top_final)
## create list of unique top.max barcodes across all data
all.top.max = unique(data.table::rbindlist(top_max))
#' configuration functions
#' @export
theme_Publication <- function(base_size=24, base_family="Arial",aspect.ratio = 0.75) {
(ggthemes::theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA, fill="#FCFCFC"),
plot.background = element_rect(colour = NA),
panel.border = element_rect(fill = NA, colour = "black", size=1.5),
axis.title = element_text(size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin=grid::unit(c(10,5,5,5),"mm"),
aspect.ratio=aspect.ratio
))
}
theme_Publication_noYaxis <- function(base_size=24, base_family="Arial",aspect.ratio = 0.75) {
(ggthemes::theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA, fill="#FCFCFC"),
plot.background = element_rect(colour = NA),
panel.border = element_rect(fill = NA, colour = "black", size=1.5),
axis.title = element_text(size = rel(1)),
axis.title.x = element_text(vjust = -0.2),
axis.title.y = element_blank(),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin=grid::unit(c(10,5,5,5),"mm"),
aspect.ratio=aspect.ratio
))
}
theme_Matrix <- function(base_size=24, base_family="Arial") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA, fill="#FCFCFC"),
plot.background = element_rect(colour = NA),
panel.border = element_rect(fill = NA, colour = "black", size=1.5),
axis.title = element_text(size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text.x = element_text(angle = 45,hjust=1),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
legend.title = element_text(angle = -90),
legend.title.align = 0.5,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin=unit(c(10,5,5,5),"mm")
))
}
all.top.max = all.top.max[,c(1,2)]
all.top.max = all.top.max[order(-all.top.max$max),]
dup.vec = duplicated(all.top.max$ID)
all.top.max = all.top.max[!dup.vec,]
## we limit the selection such that all barcodes with max frequency > '-t' are assigned a hex color
treshold.top.max <- all.top.max[all.top.max$max >= min_freq_treshold, ]
## we create a very long list of colors for low-frequency barcodes.
top_colors <- readr::read_csv("./inst/extdata/top_colors2.csv")
long.color.list = rep(top_colors$hex,50)
long.color.list.random = sample(long.color.list)
## As a result, all top max frequencies > '-t' are assigned a hex color
top_colors = top_colors[1:length(treshold.top.max[[1]]),]
treshold.top.max = cbind(treshold.top.max,top_colors)
plot_choice <- "both"
#' A plot function
#'
#' This function allows you to plot barcode dynamics (linear plot and
#'  log-transformed plot).
#'
#' @param raw_df a dataframe produced by reshapeDF()
#' @param freq_treshold a double representing a limit frequency above which barcodes have assigned colors
#' @param cohort_name a character string indicating the sample's name
#' @param plot_model a character string indicating what kind of plot the user wants to model
#' @import ggplot2
#' @export plotDynamics
plotDynamics <- function(raw_df, freq_treshold, cohort_name, plot_model) {
#raw_df=dataframes[[1]]
#freq_treshold=min_freq_treshold
#cohort_name=cohort_names[[1]]
#plot_model="both"
x_breaks = sort(c(unique(raw_df$variable)))
#log10_y_breaks = sort(c(unique(raw_df$value)))
treshold_top_max = treshold.top.max
treshold_top_max$max=NULL
df = merge(raw_df, treshold_top_max, by = "ID",all.x = TRUE)
# for all barcodes without a universal color (barcodes with max frequencies < treshold),
# assign a gray hex value
df[is.na(df$hex),]$hex="#cccccc"
# convert ID to factor for grouping
df$ID = as.factor(df$ID)
# important: order dataframe by max frequency; this will determine the stacking of areas in the plot
tf = df[order(df$max),]
# subset dataframe with barcodes above a certain max frequency
grouped_by = magrittr::`%>%`(tf, dplyr::group_by(hex))
filtered = magrittr::`%>%`(grouped_by, dplyr::filter(max>freq_treshold))
grouped_tf = magrittr::`%>%`(filtered, dplyr::ungroup())
# set color scale using universal hex colors
mycolors = grouped_tf$hex
names(mycolors) = grouped_tf$ID
# map factor levels to max frequencies
grouped_tf$ID = factor(grouped_tf$ID, levels = unique(grouped_tf$ID[order(grouped_tf$max)]))
tf$ID = factor(tf$ID, levels = unique(tf$ID[order(tf$max)]))
# here we plot a first geom_area with all the barcodes using the long color list
# then we add a new fill scale, and plot a second geom_area on top of the first
# using only the subsetted, high-freq barcodes
if (plot_model == "log"){
g = ggplot(tf) + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=tf) + scale_fill_manual(values = long.color.list.random, guide=FALSE) +
ggnewscale::new_scale_fill() + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=grouped_tf) +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) + theme_Publication() +
scale_fill_manual(values = mycolors,name="Cluster ID", guide="none") +
labs(x="Time" , y="Barcode density") + coord_cartesian(expand = FALSE)
ggsave(g,filename = paste(output_directory, cohort_name,"_area.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
} else if(plot_model == "linear"){
all.line = ggplot() + geom_line(aes(x=variable,y=value,group=ID),data=tf,colour="#CCCCCC",alpha=0.3) +
geom_line(aes(x=variable,y=value,group=ID,colour=ID),data=grouped_tf,size=1) +
theme_Publication() + scale_y_log10(limits=c(min(tf$value)+1e-7,1e0)) + scale_color_manual(values = mycolors,name="Cluster ID") + labs(x ="Time" ,y="Barcode frequency") +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) +
guides(color = FALSE, shape = guide_legend(order = 1))  + coord_cartesian(expand = FALSE)
ggsave(all.line,filename = paste(output_directory, cohort_name,"_line.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
} else if(plot_model == "both"){
g = ggplot(tf) + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=tf) + scale_fill_manual(values = long.color.list.random, guide=FALSE) +
ggnewscale::new_scale_fill() + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=grouped_tf) +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) + theme_Publication() +
scale_fill_manual(values = mycolors,name="Cluster ID", guide="none") +
labs(x="Time" , y="Barcode density") + coord_cartesian(expand = FALSE)
ggsave(g,filename = paste(output_directory, cohort_name,"_area.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
all.line = ggplot() + geom_line(aes(x=variable,y=value,group=ID),data=tf,colour="#CCCCCC",alpha=0.3) +
geom_line(aes(x=variable,y=value,group=ID,colour=ID),data=grouped_tf,size=1) +
theme_Publication() + scale_y_log10(limits=c(min(tf$value)+1e-7,1e0)) + scale_color_manual(values = mycolors,name="Cluster ID") + labs(x ="Time" ,y="Barcode frequency") +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) +
guides(color = FALSE, shape = guide_legend(order = 1))  + coord_cartesian(expand = FALSE)
ggsave(all.line,filename = paste(output_directory, cohort_name,"_line.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
}
}
for(i in 1:length(dataframes)) {
plotDynamics(dataframes[[i]], min_freq_treshold, cohort_names[[i]], plot_choice)
}
View(dataframes)
raw_df=dataframes[[1]]
freq_treshold=min_freq_treshold
plot_model="both"
cohort_name=cohort_names[[1]]
x_breaks = sort(c(unique(raw_df$variable)))
treshold_top_max = treshold.top.max
treshold_top_max$max=NULL
df = merge(raw_df, treshold_top_max, by = "ID",all.x = TRUE)
# for all barcodes without a universal color (barcodes with max frequencies < treshold),
# assign a gray hex value
df[is.na(df$hex),]$hex="#cccccc"
df = merge(raw_df, treshold_top_max, by = "ID",all.x = TRUE)
is.na(df$hex)
df[is.na(df$hex),]
# for all barcodes without a universal color (barcodes with max frequencies < treshold),
# assign a gray hex value
df[is.na(df$hex),]$hex="#cccccc"
(is.na(df$hex))
# for all barcodes without a universal color (barcodes with max frequencies < treshold),
# assign a gray hex value
if (is.na(df$hex)){
df[is.na(df$hex),]$hex="#cccccc"
}
df[is.na(df$hex),]
len(df[is.na(df$hex),])
nrows(df[is.na(df$hex),])
nrow(df[is.na(df$hex),])
(nrow(df[is.na(df$hex),]) > 0)
# for all barcodes without a universal color (barcodes with max frequencies < treshold),
# assign a gray hex value
if (nrow(df[is.na(df$hex),]) > 0){
df[is.na(df$hex),]$hex="#cccccc"
}
# convert ID to factor for grouping
df$ID = as.factor(df$ID)
# important: order dataframe by max frequency; this will determine the stacking of areas in the plot
tf = df[order(df$max),]
# subset dataframe with barcodes above a certain max frequency
grouped_by = magrittr::`%>%`(tf, dplyr::group_by(hex))
filtered = magrittr::`%>%`(grouped_by, dplyr::filter(max>freq_treshold))
grouped_tf = magrittr::`%>%`(filtered, dplyr::ungroup())
# set color scale using universal hex colors
mycolors = grouped_tf$hex
names(mycolors) = grouped_tf$ID
# map factor levels to max frequencies
grouped_tf$ID = factor(grouped_tf$ID, levels = unique(grouped_tf$ID[order(grouped_tf$max)]))
tf$ID = factor(tf$ID, levels = unique(tf$ID[order(tf$max)]))
if (plot_model == "log"){
g = ggplot(tf) + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=tf) + scale_fill_manual(values = long.color.list.random, guide=FALSE) +
ggnewscale::new_scale_fill() + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=grouped_tf) +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) + theme_Publication() +
scale_fill_manual(values = mycolors,name="Cluster ID", guide="none") +
labs(x="Time" , y="Barcode density") + coord_cartesian(expand = FALSE)
ggsave(g,filename = paste(output_directory, cohort_name,"_area.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
} else if(plot_model == "linear"){
all.line = ggplot() + geom_line(aes(x=variable,y=value,group=ID),data=tf,colour="#CCCCCC",alpha=0.3) +
geom_line(aes(x=variable,y=value,group=ID,colour=ID),data=grouped_tf,size=1) +
theme_Publication() + scale_y_log10(limits=c(min(tf$value)+1e-7,1e0)) + scale_color_manual(values = mycolors,name="Cluster ID") + labs(x ="Time" ,y="Barcode frequency") +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) +
guides(color = FALSE, shape = guide_legend(order = 1))  + coord_cartesian(expand = FALSE)
ggsave(all.line,filename = paste(output_directory, cohort_name,"_line.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
} else if(plot_model == "both"){
g = ggplot(tf) + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=tf) + scale_fill_manual(values = long.color.list.random, guide=FALSE) +
ggnewscale::new_scale_fill() + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=grouped_tf) +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) + theme_Publication() +
scale_fill_manual(values = mycolors,name="Cluster ID", guide="none") +
labs(x="Time" , y="Barcode density") + coord_cartesian(expand = FALSE)
ggsave(g,filename = paste(output_directory, cohort_name,"_area.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
all.line = ggplot() + geom_line(aes(x=variable,y=value,group=ID),data=tf,colour="#CCCCCC",alpha=0.3) +
geom_line(aes(x=variable,y=value,group=ID,colour=ID),data=grouped_tf,size=1) +
theme_Publication() + scale_y_log10(limits=c(min(tf$value)+1e-7,1e0)) + scale_color_manual(values = mycolors,name="Cluster ID") + labs(x ="Time" ,y="Barcode frequency") +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) +
guides(color = FALSE, shape = guide_legend(order = 1))  + coord_cartesian(expand = FALSE)
ggsave(all.line,filename = paste(output_directory, cohort_name,"_line.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
}
library(ggplot2)
library(dplyr)
library(magrittr)
library(ggpubr)
g = ggplot(tf) + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=tf) + scale_fill_manual(values = long.color.list.random, guide=FALSE) +
ggnewscale::new_scale_fill() + geom_area(aes(x=variable,y=value,group=ID,fill=ID),data=grouped_tf) +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) + theme_Publication() +
scale_fill_manual(values = mycolors,name="Cluster ID", guide="none") +
labs(x="Time" , y="Barcode density") + coord_cartesian(expand = FALSE)
ggsave(g,filename = paste(output_directory, cohort_name,"_area.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
all.line = ggplot() + geom_line(aes(x=variable,y=value,group=ID),data=tf,colour="#CCCCCC",alpha=0.3) +
geom_line(aes(x=variable,y=value,group=ID,colour=ID),data=grouped_tf,size=1) +
theme_Publication() + scale_y_log10(limits=c(min(tf$value)+1e-7,1e0)) + scale_color_manual(values = mycolors,name="Cluster ID") + labs(x ="Time" ,y="Barcode frequency") +
scale_x_continuous(limits=c(min(x_breaks), max(x_breaks))) +
guides(color = FALSE, shape = guide_legend(order = 1))  + coord_cartesian(expand = FALSE)
ggsave(all.line,filename = paste(output_directory, cohort_name,"_line.jpeg", sep=""), type = "cairo",width = 8.25,height = 6)
source("~/Documents/doblin/demo/main.R")
# Set parameters
alpha <- 1.5
beta <- 0.0003
# Generate values from gamma distribution
x <- seq(0, 10000, length.out = 1000)  # Define range of x values
y <- dgamma(x, shape = alpha, rate = beta)  # Calculate density values
# Plot gamma distribution
plot(x, y, type = "l", lwd = 2, col = "blue",
xlab = "x", ylab = "Density",
main = "Gamma Distribution with alpha = 1.5, beta = 0.0003")
